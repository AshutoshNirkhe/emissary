// ./log_util.go.gen
// Code generated by the above command; DO NOT EDIT.

package sd_daemon

import "log/syslog"

// Emerg writes a message with priority syslog.LOG_EMERG to the log.
func (l *Logger) Emerg(msg string) error {
	_, err := l.LogString(syslog.LOG_EMERG, msg)
	return err
}

// Alert writes a message with priority syslog.LOG_ALERT to the log.
func (l *Logger) Alert(msg string) error {
	_, err := l.LogString(syslog.LOG_ALERT, msg)
	return err
}

// Crit writes a message with priority syslog.LOG_CRIT to the log.
func (l *Logger) Crit(msg string) error {
	_, err := l.LogString(syslog.LOG_CRIT, msg)
	return err
}

// Err writes a message with priority syslog.LOG_ERR to the log.
func (l *Logger) Err(msg string) error {
	_, err := l.LogString(syslog.LOG_ERR, msg)
	return err
}

// Warning writes a message with priority syslog.LOG_WARNING to the log.
func (l *Logger) Warning(msg string) error {
	_, err := l.LogString(syslog.LOG_WARNING, msg)
	return err
}

// Notice writes a message with priority syslog.LOG_NOTICE to the log.
func (l *Logger) Notice(msg string) error {
	_, err := l.LogString(syslog.LOG_NOTICE, msg)
	return err
}

// Info writes a message with priority syslog.LOG_INFO to the log.
func (l *Logger) Info(msg string) error {
	_, err := l.LogString(syslog.LOG_INFO, msg)
	return err
}

// Debug writes a message with priority syslog.LOG_DEBUG to the log.
func (l *Logger) Debug(msg string) error {
	_, err := l.LogString(syslog.LOG_DEBUG, msg)
	return err
}
