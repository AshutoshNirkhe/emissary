name: job-image
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'releng/**'
      - 'charts/**'
      - 'manifests/**'
      - 'k8s-config/**'
      - 'docs/**'
      - '*.md$'
  pull_request:
    paths-ignore:
      - 'releng/**'
      - 'charts/**'
      - 'manifests/**'
      - 'k8s-config/**'
      - 'docs/**'
      - '*.md$'

jobs:
  job-image:
    runs-on: ubuntu-latest
    name: job-image
    env:
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      DEV_REGISTRY: ${{ secrets.DEV_REGISTRY }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
          password: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
      - name: "make push-dev"
        run: |
          make push-dev
      - name: "Clean up dirty chart stuff"
        run: |
          make chart-clean
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty (from make push + make push-dev)"
      - name: Slack notification
        if: ${{ failure() && startsWith(github.head_ref, 'rel/v') }}
        uses: edge/simple-slack-notify@master
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          failure_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build failed'
          fields: |
            [{ "title": "Repository", "value": "${env.GITHUB_REPOSITORY}", "short": true },
             { "title": "Branch", "value": "${env.GITHUB_HEAD_REF}", "short": true },
             { "title": "Action URL", "value": "${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}"}
            ]
  tag-rc:
    runs-on: ubuntu-latest
    name: tag-rc
    needs: [job-image]
    if: ${{ startsWith(github.head_ref, 'rel/v') }}
    env:
      GIT_API_KEY: ${{ secrets.GH_API_KEY }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      DEV_REGISTRY: ${{ secrets.DEV_REGISTRY }}
      RELEASE_REGISTRY: ${{ secrets.RELEASE_REGISTRY }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: "setup git config"
        run: |
          set -x
          git config --global user.email "dev@datawire.io"
          git config --global user.name "d6e-automaton"
          git config --global "url.https://$GIT_API_KEY@github.com.insteadOf" https://github.com
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.GH_DOCKER_RELEASE_USERNAME }}
          password: ${{ secrets.GH_DOCKER_RELEASE_PASSWORD }}
      - name: "tag rc"
        run: |
          make release/rc/tag
      - name: "make release/promote-oss/dev-to-rc"
        run: |
          make release/promote-oss/dev-to-rc
      - name: Extract RC Info
        shell: bash
        run: |
          make release/rc/print-test-artifacts >> $GITHUB_ENV
      - name: Slack notification
        if: always()
        uses: edge/simple-slack-notify@master
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          success_text: 'Emissary RC for ${env.RC_TAG} successfully built:\n\`\`\`export AMBASSADOR_MANIFEST_URL=${env.AMBASSADOR_MANIFEST_URL}\nexport HELM_CHART_VERSION=${env.HELM_CHART_VERSION}\`\`\`'
          failure_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build failed'
          cancelled_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build was cancelled'
          fields: |
            [{ "title": "Repository", "value": "${env.GITHUB_REPOSITORY}", "short": true },
             { "title": "Branch", "value": "${env.GITHUB_HEAD_REF}", "short": true },
             { "title": "Action URL", "value": "${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}"}
            ]
  # TODO: THIS NEEDS TO DEPEND ON ALL THINGS PASSING
  promote-to-passed:
    runs-on: ubuntu-latest
    name: promote-to-passed
    needs: [tag-rc]
    if: ${{ startsWith(github.head_ref, 'rel/v') }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - run:
          name: "promote build to passed"
          command: |
            make release/promote-oss/dev-to-passed-ci
