name: job-promote-to-passed

on:
  push:
    branches:
      - master
      - release/v*
  pull_request: {}

jobs:
  lint-test:
    name: "lint-test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: make lint
        shell: bash
        run: |
          make lint
  generate:
    name: "generate"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: "install bsdtar (libarchive-tools)"
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libarchive-tools
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "'make generate'"
        shell: bash
        run: |
          make generate
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from 'make generate'"
      - name: "'make generate' (again!)"
        shell: bash
        run: |
          make generate
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from 'make generate' (again!)"
  check-envoy-version:
    name: "check-envoy-version"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - run: make check-envoy-version
  go-tests:
    runs-on: ubuntu-latest
    name: gotest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: echo "PREFIX=gotests" >> $GITHUB_ENV
        shell: bash
        name: Set Unique Test prefix
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            awscli
            packaging
        name: "Install Python requirements with pip"
      - run: |
          go install gotest.tools/gotestsum@latest
        shell: bash
        name: "Install gotestsum (latest)"
      - name: make gotest
        shell: bash
        run: |
          export DEV_KUBE_NO_PVC=yes
          export KAT_REQ_LIMIT=900
          export TEST_XML_DIR=/tmp/test-logs/xml/
          export GOTEST_ARGS='-timeout 30m'
          mkdir -p ${TEST_XML_DIR}
          make gotest
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from testing"
      # collect logs
      - uses: ./.github/actions/collect-testing-logs
        if: always()
        name: "Collect testing logs"
  pytests:
    runs-on: ubuntu-latest
    env:
      DEV_REGISTRY: ${{ secrets.DEV_REGISTRY }}
      DOCKER_USERNAME: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        test:
          - integration
          - kat-envoy2-ah
          - kat-envoy2-ip
          - kat-envoy2-qz
          - kat-envoy3-ah
          - kat-envoy3-ip
          - kat-envoy3-qz
          # FIXME(lukeshu): KAT_RUN_MODE=local is disabled because it
          # needs fixed for a world where annotations are already
          # unfolded in the snapshot.
          #
          #- kat-local
    name: pytest-${{ matrix.test }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: echo "PREFIX=pytest-${{ matrix.test }}" >> $GITHUB_ENV
        name: Set Unique Test prefix ${{ env.PREFIX }}
        shell: bash
      - run: echo "USE_LOCAL_K3S_CLUSTER=1" >> $GITHUB_ENV
        shell: bash
        name: "Set USE_LOCAL_K3S_CLUSTER=1"
      - run: |
          sudo sysctl -w fs.file-max=1600000
          sudo sysctl -w fs.inotify.max_user_instances=4096
        shell: bash
        name: "Configure system file and inotify maximums (1600000/4096)"
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            awscli
            packaging
        name: "Install Python requirements with pip"
      - name: "Install and start k3d"
        shell: bash
        run: |
          make ci/setup-k3d K3D_CLUSTER_NAME=amb-ci
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: make pytest-${{ matrix.test }}
        uses: nick-invision/retry@v2.4.0
        with:
          max_attempts: 3
          timeout_minutes: 20
          command: |
            export DEV_KUBE_NO_PVC=yes
            export KAT_REQ_LIMIT=900
            export TEST_XML_DIR=/tmp/test-logs/xml/
            export DEV_KUBECONFIG=~/.kube/config
            export DEV_REGISTRY=${{ env.DEV_REGISTRY }}
            mkdir -p ${TEST_XML_DIR}
            make pytest-${{ matrix.test }}
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from testing"
      # collect logs
      - uses: ./.github/actions/collect-testing-logs
        if: always()
        name: "Collect testing logs"
  pytest-unit:
    # pytest-unit is separate from pytests (above) because we know for certain that no cluster is needed.
    # XXX This is pretty much a crock.
    runs-on: ubuntu-latest
    env:
      DEV_REGISTRY: ${{ secrets.DEV_REGISTRY }}
      DOCKER_USERNAME: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
    strategy:
      matrix:
        test:
          - unit
    name: pytest-${{ matrix.test }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: echo "PREFIX=pytest-${{ matrix.test }}" >> $GITHUB_ENV
        name: Set Unique Test prefix ${{ env.PREFIX }}
        shell: bash
      - run: |
          sudo sysctl -w fs.file-max=1600000
          sudo sysctl -w fs.inotify.max_user_instances=4096
        shell: bash
        name: "Configure system file and inotify maximums (1600000/4096)"
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            awscli
            packaging
        name: "Install Python requirements with pip"
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: make pytest-${{ matrix.test }}
        uses: nick-invision/retry@v2.4.0
        with:
          max_attempts: 3
          timeout_minutes: 20
          command: |
            export DEV_KUBE_NO_PVC=yes
            export KAT_REQ_LIMIT=900
            export TEST_XML_DIR=/tmp/test-logs/xml/
            export DEV_KUBECONFIG=~/.kube/config
            export DEV_REGISTRY=${{ env.DEV_REGISTRY }}
            mkdir -p ${TEST_XML_DIR}
            make pytest-${{ matrix.test }}
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty from testing"
      # collect logs
      - uses: ./.github/actions/collect-testing-logs
        if: always()
        name: "Collect testing logs"
  job-image:
    name: "job-image"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      DEV_REGISTRY: ${{ secrets.DEV_REGISTRY }}
      DOCKER_USERNAME: ${{ secrets.GH_DOCKER_BUILD_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.GH_DOCKER_BUILD_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "Docker Login"
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: "make push"
        shell: bash
        run: |
          make push
      - name: "make push-dev"
        shell: bash
        run: |
          make push-dev
      - uses: ./.github/actions/git-dirty-check
        name: "Check git not dirty (from make push + make push-dev)"
  promote-to-passed:
    needs:
      - lint-test
      - job-image
      - generate
      - check-envoy-version
      - go-tests
      - pytests
      - pytest-unit
    runs-on: ubuntu-latest
    name: job-promote-to-passed
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Deps
        uses: ./.github/actions/setup-deps
      - name: "promote build to passed"
        run: |
          make release/promote-oss/dev-to-passed-ci
