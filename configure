#!/usr/bin/make -f

require-program = $(or $(shell which $1),$(error ./configure requires the '$1' program in order to run))

tools/bazel   = $(call require-program,bazel)
tools/jq      = $(call require-program,jq)
tools/go      = $(call require-program,go)
tools/gazelle = $(tools/bazel) run //:gazelle --

.DELETE_ON_ERROR:
.SECONDARY:

build: $(CURDIR)/.generate-BUILDs
clean: $(CURDIR)/.clean
.PHONY: build clean

%/.clean:
	rm -rf $(@D)/vendor
	find $(@D) -mindepth 2 \( -name BUILD -o -name BUILD.bazel \) -type f -delete
.PHONY: %/.clean

%/WORKSPACE: %/WORKSPACE.in %/python/WORKSPACE
	set -e; { \
	  cat $*/WORKSPACE.in; \
	  grep -v '^workspace(' $*/python/WORKSPACE; \
	} > $@

%/.generate-BUILDs: %/WORKSPACE %/BUILD %/vendor %/python/configure
	find $(@D) -mindepth 2 \( -name BUILD -o -name BUILD.bazel \) -type f -delete
	cd $(@D) && $(tools/gazelle)
	find $(@D) -mindepth 2 -name BUILD -type f -exec sed -i.bak '1i# File generated by ./generate; DO NOT EDIT.\n' -- {} +
	find $(@D) -mindepth 2 -name BUILD -exec grep -l '^go_binary(' -- {} + | xargs sed -i 's,//visibility:private,//visibility:public,' --
	find $(@D) -name BUILD.bak -type f -delete
	cd $(@D)/python && ./configure
.PHONY: %/.generate-BUILDS

%/vendor: %/go.mod
	rm -rf $@
	cd $(@D) && go mod vendor
