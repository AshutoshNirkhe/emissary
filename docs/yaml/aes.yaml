---
# Source: ambassador/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  labels:
    product: aes
  name: ambassador
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador-agent
  namespace: ambassador
  labels:
    product: aes
---
# Source: ambassador/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador
  namespace: ambassador
  labels:
    product: aes
---
# Source: ambassador/templates/aes-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ambassador-edge-stack
  namespace: ambassador
type: Opaque
data:
  license-key: ""
---
# Source: ambassador/templates/projects.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ambassador-registry-tls
  namespace: ambassador
  labels:
    product: aes
type: kubernetes.io/tls
data:
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVEekNDQXZlZ0F3SUJBZ0lVSVZrWlJGSkVJ
    VCtOTlJiMFJ0TkxwZFp5TTVnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daWXhDekFKQmdOVkJBWVRB
    bFZUTVJZd0ZBWURWUVFJREExTllYTnpZV05vZFhObGRIUnpNUk13RVFZRApWUVFIREFwVGIyMWxj
    blpwYkd4bE1SRXdEd1lEVlFRS0RBaEVZWFJoZDJseVpURVVNQklHQTFVRUN3d0xSVzVuCmFXNWxa
    WEpwYm1jeEVUQVBCZ05WQkFNTUNISmxaMmx6ZEhKNU1SNHdIQVlKS29aSWh2Y05BUWtCRmc5a1pY
    WkEKWkdGMFlYZHBjbVV1YVc4d0hoY05NakF3TVRNd01qRXdNVFV5V2hjTk1qRXdNVEk1TWpFd01U
    VXlXakNCbGpFTApNQWtHQTFVRUJoTUNWVk14RmpBVUJnTlZCQWdNRFUxaGMzTmhZMmgxYzJWMGRI
    TXhFekFSQmdOVkJBY01DbE52CmJXVnlkbWxzYkdVeEVUQVBCZ05WQkFvTUNFUmhkR0YzYVhKbE1S
    UXdFZ1lEVlFRTERBdEZibWRwYm1WbGNtbHUKWnpFUk1BOEdBMVVFQXd3SWNtVm5hWE4wY25reEhq
    QWNCZ2txaGtpRzl3MEJDUUVXRDJSbGRrQmtZWFJoZDJseQpaUzVwYnpDQ0FTSXdEUVlKS29aSWh2
    Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTFRtZ21wb2szVVdCVkhqCjFqb2R5eG9LZFJad09Y
    WnhiZ25ITXlMa2xxLzUydGdmTEJmVlU1TzB2aE5iVm5vcEVSRWdWV0pTd3dlN0dOS0EKSjlaWWxC
    Qlc1Q1U5Q3FNalU2TTVOdTdiVWRQblNyNGRFSFlWcmhEakJYcVpDUElEaFhZS2ZZYWh0YlB4cis1
    egpueS9qQktKU2JwM3RWU3d5SEhsY3JJNHdOU2R1Q2x5UFplOFR0Q2hGQUxhcU5rWUMvclNGK0w0
    SWcwZmY1N0duClpFVmsyZDJja09Xbkp6akRXMGhYL3FUcXhUKzZwV2tUQThWQ0FVS2FabEY5VkRK
    c20rOW1XM2dBWmZ5NWdFWloKajcvaktqNTd5R1BUR2xWQXhra2J2WlJJVWQ5LzVkVmE3V1RCYnlR
    dkxvOEkyWWQ3S1h6Y3BjcElpS2hRREdPQQpHbGVoa2JVQ0F3RUFBYU5UTUZFd0hRWURWUjBPQkJZ
    RUZGTDV5NnNIb09tV0FRWVVGano4VHNETGFnUTdNQjhHCkExVWRJd1FZTUJhQUZGTDV5NnNIb09t
    V0FRWVVGano4VHNETGFnUTdNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHcKRFFZSktvWklodmNOQVFF
    TEJRQURnZ0VCQUFZdHlnNDNDTEJsbVlvY0NkSjVpSlF0NTR0anFGU2hIMzdFd3h4WQp1QVExRHRW
    a0Q3QngzUURZZ1cxeU1QYzFTRDhYenFUcWxjQUlOQTZwdVB0SlNPcC8wUUVqVFJSMkFSZFF5VURI
    ClZOZEZzcHp5MGRnbllqOXY2ckl4akdOazVHZXI3cUp4TURaUUY0dC82NHZLYWNyOHZOQ3dnSmI5
    WEZaMTBjNlEKdVNSNVVVN1pMTWJPeWd4a0hPQStMMXp3S2pSaXZUb2ZMbExPOURQNUJwMk9hOGgr
    TmZhVkJ4ZHFUS2l0UzFaOApnUnZhOTFuRHZwTjl5aHBiNFJVN2FoWW9tWGF4VE5ZVEJxVE1uZWhE
    aWhPQjdBS2Z0VVErdjJWZ2VlM1FxaGJ4CjRUSlJpTTUxR2VIWEtoVWw5ZXBxRnBlYllIa1BnU1ln
    bU1OUy9aT3JSWmFxajVRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZB
    QVNDQktZd2dnU2lBZ0VBQW9JQkFRQzA1b0pxYUpOMUZnVlIKNDlZNkhjc2FDblVXY0RsMmNXNEp4
    ek1pNUphditkcllIeXdYMVZPVHRMNFRXMVo2S1JFUklGVmlVc01IdXhqUwpnQ2ZXV0pRUVZ1UWxQ
    UXFqSTFPak9UYnUyMUhUNTBxK0hSQjJGYTRRNHdWNm1RanlBNFYyQ24yR29iV3o4YS91CmM1OHY0
    d1NpVW02ZDdWVXNNaHg1WEt5T01EVW5iZ3BjajJYdkU3UW9SUUMycWpaR0F2NjBoZmkrQ0lOSDMr
    ZXgKcDJSRlpObmRuSkRscHljNHcxdElWLzZrNnNVL3VxVnBFd1BGUWdGQ21tWlJmVlF5Ykp2dlps
    dDRBR1g4dVlCRwpXWSsvNHlvK2U4aGoweHBWUU1aSkc3MlVTRkhmZitYVld1MWt3VzhrTHk2UENO
    bUhleWw4M0tYS1NJaW9VQXhqCmdCcFhvWkcxQWdNQkFBRUNnZ0VBWUxiMGRxdGVXclRoTnp6V0pk
    QVQ2K0kzWXoyd214QmR3a0NMcUZZSjhoOWsKenpNclFicTlxalJ4Z3F2TWVoZEdscDl3eHRaMGlz
    ZU9wOHY0Z0hKdkJxVk42RkxRUXhQNS9VUHppSlFkRld1TQozRU54cjVBN3RhK0tHRmVGSHM2Zkpk
    TEo5WmF6TEhkRWxmbWUyOTFGZHZzWFJMdkVVNUtmQW90M2ZiVnNWWjFxCnRucVIzY0dET3JVQ00v
    ZzJKZmVBYk5wSUJjTnlCV0diOGRQbm5SaHZRNW5YN1ozUnJiNTlhQnhOcldCSkFkbnEKOUtkS3BR
    UmU4cjBiRGJ0WVZQamxXRldpOVluWVQ0WHpQOG9TU0t5a3R4TWZraEM2dlVKb0gwNHFOSmRkWjVM
    WAozWjRKUm14RnlUZU1rUG0xa2dnSVVRZGJhRWp1WG0rOThOeXVkZitKcVFLQmdRRGx6SS9XMzZM
    am1pRE9MSDVUCnFhZTFnazNMV2lTY3hwZzRhazEyenhLSlkrWUJiNnc4UG5EVmlvY2tPa0lsSERh
    V0xzQ2VpRkJsM2lPSDlUWWcKQm9iY3JVZVNUbWdOaUNqSlpIWVhIUlY1TEN2bGE0UkhhcXNMWG43
    elptTE5GVW9YRlhaTkoyQzlqUEp5TStyQQpqOWJLWlFvQTF2NC9qOUdMTXN3eEJZem1pd0tCZ1FE
    SmhxNDhrYmV0MlRTRFhyMUxuY3FMVU9wak1hQmNyOEJKCnpDNlBwK3F0ck01QVE1RnkwaHRoV2Zn
    bDkzZU5vMWRQT2pCRDZ6amIyd2dNSHhBR2w1V0pIN005enFBSWJSaW0KbDFNcmsrUkprbUVGeUls
    cU95TG9jNlg0V1pPN1BwejZPQkdWTExGOFlBR09UcldaRzZwUStDeVJWN3hHUS9PWAo4QlN5UVVh
    d3Z3S0JnRWFXWG55dmQxYVlpb2txUzZlaFRuM0h4K08yRGRjR2ZjMmVnYXNFRW5xWGNCaHkyQ0l0
    ClAvV29OcmpmR0dCVDJVU3FtY3BZcnZHTG1iaHlqeXlwTkpYbXVEeHR6ektRNTQ1dFNJVHpEeHlJ
    Zi9kWjNta2QKaityUEhRbmhJbXBDcHQ2T1hpZDIrQlZoalR1ZFRQZlhkeS8yZDJzb256S2hGOG05
    VWRHaEZkWGZBb0dBRkZ0QwpabVBoeGZIVzJCNU55TUdib0E4QVhoeTVNaU9lck5XdkxsdXIzUGRE
    cmtJbEF4QXVLOXRHc2E4WnFIa0RiTUZYCjlzUmY3ZlZtRHJOa2p3WG8yUDBXd2Z1Sk50Q3VXTVdZ
    WlNKL1FOOUVaYTBvRkU3ODY3WWk0YjlLcVBOZUwvaFIKN2x1aFlncmduVnRlQktWQ3d3TU9uVy9i
    V00yc1lZQ2kxbzY1Y1VrQ2dZQUR4SUJmOGZUOURDS0NaZ1FvQXNDYwpvSzcvdzdDYk1hOEp5TjZa
    ZDRiSlIrSzRzUEtQekd2M3dEandxRzFTRkN6UU1FR01mOWt6TWFYb09XdzNaN2NCCklIZTJDUXFF
    N2NZdW1LYjFkOTFueU1qMVdQVC9CWEJKZzB3aUNMV0RjakdQR0xNWTJyeGsvMWwzL2xjKy9WVkcK
    NjRZZUh1YlllOE9Iemp5UEZGSnJZdz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

######################################################################
# Project Controller
#
# Comment this out if you want to disable the micro CI/CD functionality:
---
# Source: ambassador/templates/projects.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ambassador-registry-config
  namespace: ambassador
  labels:
    product: aes
data:
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
      tls:
        certificate: /etc/tls/tls.crt
        key: /etc/tls/tls.key
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3

# The persistent volume for our registry.
---
# Source: ambassador/templates/projects.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ambassador-registry-data
  namespace: ambassador
  labels:
    product: aes
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

# The self-signed tls secret for our registry. We should look into
# generating this on install with a job.
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-agent
  labels:
    product: aes
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.getambassador.io/role-group: ambassador-agent
rules: []
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-agent-pods
  labels:
    rbac.getambassador.io/role-group: ambassador-agent
    product: aes
rules:
- apiGroups: [""]
  resources: [ "pods"]
  verbs: [ "get", "list", "watch" ]
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-agent-deployments
  labels:
    rbac.getambassador.io/role-group: ambassador-agent
    product: aes
rules:
- apiGroups: ["apps", "extensions"]
  resources: [ "deployments" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-agent-endpoints
  labels:
    rbac.getambassador.io/role-group: ambassador-agent
    product: aes
rules:
- apiGroups: [""]
  resources: [ "endpoints" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-agent-configmaps
  labels:
    rbac.getambassador.io/role-group: ambassador-agent
    product: aes
rules:
- apiGroups: [""]
  resources: [ "configmaps" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-agent-rollouts
  labels:
    rbac.getambassador.io/role-group: ambassador-agent
    product: aes
rules:
- apiGroups: ["argoproj.io"]
  resources: [ "rollouts" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-agent-applications
  labels:
    rbac.getambassador.io/role-group: ambassador-agent
    product: aes
rules:
- apiGroups: ["argoproj.io"]
  resources: [ "applications" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: ambassador/templates/projects-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-projects
  labels:
    product: aes
rules:
- apiGroups: [""]
  resources: [ "secrets", "services" ]
  verbs: [ "get", "list", "create", "patch", "delete", "watch" ]
- apiGroups: ["apps"]
  resources: [ "deployments" ]
  verbs: [ "get", "list", "create", "patch", "delete", "watch" ]
- apiGroups: ["batch"]
  resources: [ "jobs" ]
  verbs: [ "get", "list", "create", "patch", "delete", "watch" ]
- apiGroups: [""]
  resources: [ "pods" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: [""]
  resources: [ "pods/log" ]
  verbs: [ "get" ]
---
# Source: ambassador/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador
  labels:
    product: aes
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.getambassador.io/role-group: ambassador
rules: []
---
# Source: ambassador/templates/rbac.yaml
# CRDs are cluster scoped resources, so they need to be in a cluster role,
# even if ambassador is running in single namespace mode
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-crd
  labels:
    product: aes
    rbac.getambassador.io/role-group: ambassador
rules:
  - apiGroups: [ "apiextensions.k8s.io" ]
    resources: [ "customresourcedefinitions" ]
    verbs: ["get", "list", "watch", "delete"]
---
# Source: ambassador/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-watch
  labels:
    product: aes
    rbac.getambassador.io/role-group: ambassador
rules:
  - apiGroups: [""]
    resources:
    - namespaces
    - services
    - secrets
    - endpoints
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "getambassador.io" ]
    resources: [ "*" ]
    verbs: ["get", "list", "watch", "update", "patch", "create", "delete" ]

  - apiGroups: [ "getambassador.io" ]
    resources: [ "mappings/status" ]
    verbs: ["update"]

  - apiGroups: [ "networking.internal.knative.dev" ]
    resources: [ "clusteringresses", "ingresses" ]
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "networking.x-k8s.io" ]
    resources: [ "*" ]
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "networking.internal.knative.dev" ]
    resources: [ "ingresses/status", "clusteringresses/status" ]
    verbs: ["update"]

  - apiGroups: [ "extensions", "networking.k8s.io" ]
    resources: [ "ingresses", "ingressclasses" ]
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "extensions", "networking.k8s.io" ]
    resources: [ "ingresses/status" ]
    verbs: ["update"]

  - apiGroups: [""]
    resources: [ "secrets" ]
    verbs: ["get", "list", "watch", "create", "update"]

  - apiGroups: [""]
    resources: [ "events" ]
    verbs: ["get", "list", "watch", "create", "patch"]

  - apiGroups: ["coordination.k8s.io"]
    resources: [ "leases" ]
    verbs: ["get", "create", "update"]

  - apiGroups: [""]
    resources: [ "endpoints" ]
    verbs: ["get", "list", "watch", "create", "update"]
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ambassador-agent
  labels:
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador-agent
subjects:
- kind: ServiceAccount
  name: ambassador-agent
  namespace: ambassador
---
# Source: ambassador/templates/projects-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ambassador-projects
  labels:
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador-projects
subjects:
  - name: ambassador
    namespace: ambassador
    kind: ServiceAccount
---
# Source: ambassador/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: ambassador
  labels:
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador
subjects:
  - name: ambassador
    namespace: ambassador
    kind: ServiceAccount
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ambassador-agent-config
  namespace: ambassador
  labels:
    product: aes
rules:
- apiGroups: [""]
  resources: [ "configmaps" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ambassador-agent-config
  namespace: ambassador
  labels:
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ambassador-agent-config
subjects:
- kind: ServiceAccount
  name: ambassador-agent
  namespace: ambassador
---
# Source: ambassador/templates/admin-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ambassador-admin
  namespace: ambassador
  labels:
    # Hard-coded label for Prometheus Operator ServiceMonitor
    service: ambassador-admin
    product: aes
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: "The Ambassador Edge Stack admin service for internal use and health checks."
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: "None"
spec:
  type: ClusterIP
  ports:
    - port: 8877
      targetPort: admin
      protocol: TCP
      name: ambassador-admin
    - port: 8005
      targetPort: 8005
      protocol: TCP
      name: ambassador-snapshot
  selector:
    
      service: ambassador
---
# Source: ambassador/templates/aes-redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: ambassador-redis
  namespace: ambassador
  labels:
    product: aes
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: "The Ambassador Edge Stack Redis store for auth and rate limiting, among other things."
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: "None"
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    
    service: ambassador-redis
---
# Source: ambassador/templates/projects.yaml
apiVersion: v1
kind: Service
metadata:
  name: ambassador-registry
  namespace: ambassador
  labels:
    product: aes
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: "The Ambassador Edge internal image registry."
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: "None"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: ambassador-registry
    app.kubernetes.io/instance: ambassador
  ports:
    - port: 443
      targetPort: 5000

# The registry deployment. The deployment includes a persistent volume
# mount for storing images, a config-map mount for customizing the
# registry configuration, and a secret mounted for tls.
---
# Source: ambassador/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ambassador
  namespace: ambassador
  labels:
    app.kubernetes.io/component: ambassador-service
    product: aes
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: "The Ambassador Edge Stack goes beyond traditional API Gateways and Ingress Controllers with the advanced edge features needed to support developer self-service and full-cycle development."
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: ambassador-redis.ambassador
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 8443
  selector:
    
      service: ambassador
---
# Source: ambassador/templates/aes-redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador-redis
  namespace: ambassador
  labels:
    product: aes
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      
      service: ambassador-redis
  template:
    metadata:
      labels:
        
        service: ambassador-redis
    spec:
      containers:
      - name: redis
        image: "redis:5.0.1"
        imagePullPolicy: IfNotPresent
        resources:
          {}
      restartPolicy: Always
---
# Source: ambassador/templates/ambassador-agent.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador-agent
  namespace: ambassador
  labels:
    app.kubernetes.io/name: ambassador-agent
    app.kubernetes.io/instance: ambassador
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ambassador-agent
      app.kubernetes.io/instance: ambassador
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ambassador-agent
        app.kubernetes.io/instance: ambassador
    spec:
      serviceAccountName: ambassador-agent
      containers:
      - name: agent
        image: docker.io/datawire/aes:1.13.10
        imagePullPolicy: IfNotPresent
        command: [ "agent" ]
        env:
        - name: AGENT_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AGENT_CONFIG_RESOURCE_NAME
          value: ambassador-agent-cloud-token
        - name: RPC_CONNECTION_ADDRESS
          value: https://app.getambassador.io/
        - name: AES_SNAPSHOT_URL
          value: "http://ambassador-admin.ambassador:8005/snapshot-external"
---
# Source: ambassador/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador
  namespace: ambassador
  labels:
    product: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      
      service: ambassador
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        
        service: ambassador
        app.kubernetes.io/managed-by: getambassador.io
      annotations:
        consul.hashicorp.com/connect-inject: "false"
        sidecar.istio.io/inject: "false"
    spec:
      terminationGracePeriodSeconds: 0
      securityContext:
        runAsUser: 8888
      restartPolicy: Always
      serviceAccountName: ambassador
      volumes:
        - name: ambassador-pod-info
          downwardAPI:
            items:
              - fieldRef:
                  fieldPath: metadata.labels
                path: labels
        - name: ambassador-edge-stack-secrets
          secret:
            secretName: ambassador-edge-stack
      containers:
        - name: aes
          image: docker.io/datawire/aes:1.13.10
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
            - name: admin
              containerPort: 8877
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: REDIS_URL
              value: ambassador-redis:6379
            - name: AMBASSADOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "AMBASSADOR_DRAIN_TIME"
              value: "600"
            - name: "AMBASSADOR_INTERNAL_URL"
              value: "https://127.0.0.1:8443"
            - name: "AMBASSADOR_URL"
              value: "https://ambassador.ambassador.svc.cluster.local"
            - name: "POLL_EVERY_SECS"
              value: "60"
          securityContext:
            allowPrivilegeEscalation: false
          livenessProbe:
            httpGet:
              path: /ambassador/v0/check_alive
              port: admin
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ambassador/v0/check_ready
              port: admin
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 3
          volumeMounts:
            - name: ambassador-pod-info
              mountPath: /tmp/ambassador-pod-info
              readOnly: true
            - name: ambassador-edge-stack-secrets
              mountPath: /.config/ambassador
              readOnly: true
          resources:
            limits:
              cpu: 1000m
              memory: 600Mi
            requests:
              cpu: 200m
              memory: 300Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  service: ambassador
              topologyKey: kubernetes.io/hostname
            weight: 100
      imagePullSecrets:
        []
      dnsPolicy: ClusterFirst
      hostNetwork: false
---
# Source: ambassador/templates/projects.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador-registry
  namespace: ambassador
  labels:
    product: aes
    app: registry
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: ambassador-registry
      app.kubernetes.io/instance: ambassador
  template:
    metadata:
      annotations:
        foo: "5"
      labels:
        app.kubernetes.io/name: ambassador-registry
        app.kubernetes.io/instance: ambassador
    spec:
      containers:
      - name: registry
        image: registry:2
        ports:
        - containerPort: 5000
        volumeMounts:
          - mountPath: /var/lib/registry
            name: registry-data
          - name: registry-config
            mountPath: /etc/docker/registry
          - name: registry-tls
            mountPath: /etc/tls
      volumes:
        - name: registry-config
          configMap:
            # Provide the name of the ConfigMap containing the files you want
            # to add to the container
            name: ambassador-registry-config
        - name: registry-data
          persistentVolumeClaim:
            claimName: ambassador-registry-data
        - name: registry-tls
          secret:
            secretName: ambassador-registry-tls

# The configuration file for our registry.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/crds.yaml
# GENERATED FILE: edits made by hand will not be preserved.
---
# Source: ambassador/templates/projects.yaml
######################################################################
# In-cluster Registry for Projects

# This mapping will make every host function as a docker
# registry. It's not ideal to take over the "v2" mapping, but there
# are a number of constraints that make this the least worst option
# explored so far. These constraints are:
#
# - We need a registry where docker push/pull and similar (e.g. crictl
#   push/pull) can work with no special client configuration since we
#   don't control the clients and we can't expect our users to
#   reconfigure their clusters to use a special push/pull
#   configuration.
#
# - GKE's push/pull implementation (I think it's docker) and crictl
#   push/pull (used by default in k3s clusters) have different default
#   behaviors with respect to localhost registries. The docker
#   implementation is very permissive, it will try both cleartext and
#   TLS and it does not verify the TLS connection, so self-signed
#   registries work fine. The crictl implementation is moving in this
#   direction, but the version used in k3s (based on rancher's fork of
#   containerd at v1.3.3) is not there yet. It only tries cleartext by
#   default.
#
# - We want to minimize the requirements for users to have the
#   access/understanding to create special DNS configurations
#   (e.g. wildcard or a separate dns name for the registry).
#
# - You can configure the docker registry to have a prefix,
#   e.g. <host>/<special-prefix>/v2/..., however without special
#   configuration to override the defaults, clients can't push/pull
#   from a registry served at a prefix. If your image is named
#   <foo>/<bar>, the client will look for <foo>/v2/... endpoints.
#
# Given all the prior constraints we are left with creating this
# mapping for all hosts. If this is a problem there are a few
# alternatives we could consider. We can provide a way to limit this
# mapping to only one host so they can have distinct hosts for their
# site and their registry. We could also look into creating a
# daemonset that binds to localhost and proxies cleartext to
# TLS. Based on what I know of GKE and k3s its a good guess that this
# would accommodate both of them, but possibly not other clusters with
# different configurations.
#
# Another reason to lean towards an externally accessible registry is
# that there are likely some people that would want this as a feature
# so they can docker push/pull images from other systems into/out of
# the builtin registry. While it's true that security minded people
# might not like having this registry externally accessible, it's also
# quite likely those people would want to run their own fancy registry
# that scans/audits images, etc. The focus for RtC is really a smooth
# out of the box experience that functions end-to-end without
# requiring you to build your own platform. For more security minded
# people we should expect to eventually be able to configure an
# external registry and/or turn off the builtin one.
---
# Source: ambassador/templates/aes-authservice.yaml
apiVersion: getambassador.io/v2
kind: AuthService
metadata:
  name: ambassador-edge-stack-auth
  namespace: ambassador
  labels:
    product: aes
spec:
  proto: grpc
  auth_service: 127.0.0.1:8500
  allow_request_body: false
  status_on_error:
    code: 504
---
# Source: ambassador/templates/aes-internal.yaml
# Configure DevPortal
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  # This Mapping name is referenced by convention, it's important to leave as-is.
  name: ambassador-devportal
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /docs/
  rewrite: "/docs/"
  service: "127.0.0.1:8500"
---
# Source: ambassador/templates/aes-internal.yaml
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  name: ambassador-devportal-assets
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /documentation/(assets|styles)/(.*)(.css)
  prefix_regex: true
  regex_rewrite:
    pattern: /documentation/(.*)
    substitution: /docs/\1
  service: "127.0.0.1:8500"
  add_response_headers:
    cache-control:
      value: "public, max-age=3600, immutable"
      append: false
---
# Source: ambassador/templates/aes-internal.yaml
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  # This Mapping name is what the demo uses. Sigh.
  name: ambassador-devportal-demo
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /docs/
  rewrite: "/docs/"
  service: "127.0.0.1:8500"
---
# Source: ambassador/templates/aes-internal.yaml
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  # This Mapping name is referenced by convention, it's important to leave as-is.
  name: ambassador-devportal-api
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /openapi/
  rewrite: ""
  service: "127.0.0.1:8500"
---
# Source: ambassador/templates/projects.yaml
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  name: ambassador-registry
  namespace: ambassador
  labels:
    product: aes
spec:
  prefix: /v2/
  rewrite: /v2/
  service: https://ambassador-registry
  timeout_ms: 300000
---
# Source: ambassador/templates/projects.yaml
apiVersion: getambassador.io/v2
kind: ProjectController
metadata:
  name: ambassador-projectcontroller
  namespace: ambassador
  labels:
    projects.getambassador.io/ambassador_id: default
    product: aes
---
# Source: ambassador/templates/aes-ratelimit.yaml
apiVersion: getambassador.io/v2
kind: RateLimitService
metadata:
  name: ambassador-edge-stack-ratelimit
  namespace: ambassador
  labels:
    product: aes
spec:
  service: 127.0.0.1:8500
---
# Source: ambassador/templates/tests/test-ready.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ambassador-test-ready"
  labels:
    app.kubernetes.io/name: ambassador
    helm.sh/chart: ambassador-6.7.13
    app.kubernetes.io/instance: ambassador
    app.kubernetes.io/managed-by: getambassador.io
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['ambassador:80/ambassador/v0/check_ready']
  restartPolicy: Never
